{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"@react-navigation/core\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ServerContext = _interopRequireDefault(require(\"./ServerContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar _default = React.forwardRef(function ServerContainer(_ref, ref) {\n  var children = _ref.children,\n      location = _ref.location;\n  React.useEffect(function () {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  var current = {};\n\n  if (ref) {\n    var value = {\n      getCurrentOptions: function getCurrentOptions() {\n        return current.options;\n      }\n    };\n\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      ref.current = value;\n    }\n  }\n\n  return React.createElement(_ServerContext.default.Provider, {\n    value: {\n      location: location\n    }\n  }, React.createElement(_core.CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/@react-navigation/native/lib/module/ServerContainer.js"],"names":["React","forwardRef","ServerContainer","ref","children","location","useEffect","console","error","current","value","getCurrentOptions","options","createElement","ServerContext","Provider","CurrentRenderContext"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;eAS4BA,KAAK,CAACC,UAAN,CAAiB,SAASC,eAAT,OAG1CC,GAH0C,EAGrC;AAAA,MAFNC,QAEM,QAFNA,QAEM;AAAA,MADNC,QACM,QADNA,QACM;AACNL,EAAAA,KAAK,CAACM,SAAN,CAAgB,YAAM;AACpBC,IAAAA,OAAO,CAACC,KAAR,CAAc,sFAAd;AACD,GAFD,EAEG,EAFH;AAGA,MAAMC,OAAO,GAAG,EAAhB;;AAEA,MAAIN,GAAJ,EAAS;AACP,QAAMO,KAAK,GAAG;AACZC,MAAAA,iBADY,+BACQ;AAClB,eAAOF,OAAO,CAACG,OAAf;AACD;AAHW,KAAd;;AAUA,QAAI,OAAOT,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,MAAAA,GAAG,CAACO,KAAD,CAAH;AACD,KAFD,MAEO;AAELP,MAAAA,GAAG,CAACM,OAAJ,GAAcC,KAAd;AACD;AACF;;AAED,SAAoBV,KAAK,CAACa,aAAN,CAAoBC,uBAAcC,QAAlC,EAA4C;AAC9DL,IAAAA,KAAK,EAAE;AACLL,MAAAA,QAAQ,EAARA;AADK;AADuD,GAA5C,EAIJL,KAAK,CAACa,aAAN,CAAoBG,2BAAqBD,QAAzC,EAAmD;AACjEL,IAAAA,KAAK,EAAED;AAD0D,GAAnD,EAEbL,QAFa,CAJI,CAApB;AAOD,CAnC2B,C","sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport ServerContext from './ServerContext';\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default /*#__PURE__*/React.forwardRef(function ServerContainer({\n  children,\n  location\n}, ref) {\n  React.useEffect(() => {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  const current = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      }\n\n    }; // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(ServerContext.Provider, {\n    value: {\n      location\n    }\n  }, /*#__PURE__*/React.createElement(CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});\n//# sourceMappingURL=ServerContainer.js.map"]},"metadata":{},"sourceType":"script"}