{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinking;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _core = require(\"@react-navigation/core\");\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ServerContext = _interopRequireDefault(require(\"./ServerContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar createMemoryHistory = function createMemoryHistory() {\n  var index = 0;\n  var items = [];\n  var pending = [];\n\n  var interrupt = function interrupt() {\n    pending.forEach(function (it) {\n      var cb = it.cb;\n\n      it.cb = function () {\n        return cb(true);\n      };\n    });\n  };\n\n  var history = {\n    get index() {\n      var _window$history$state;\n\n      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        var _index = items.findIndex(function (item) {\n          return item.id === id;\n        });\n\n        return _index > -1 ? _index : 0;\n      }\n\n      return 0;\n    },\n\n    get: function get(index) {\n      return items[index];\n    },\n    backIndex: function backIndex(_ref) {\n      var path = _ref.path;\n\n      for (var i = index - 1; i >= 0; i--) {\n        var item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    push: function push(_ref2) {\n      var path = _ref2.path,\n          state = _ref2.state;\n      interrupt();\n      var id = (0, _nonSecure.nanoid)();\n      items = items.slice(0, index + 1);\n      items.push({\n        path: path,\n        state: state,\n        id: id\n      });\n      index = items.length - 1;\n      window.history.pushState({\n        id: id\n      }, '', path);\n    },\n    replace: function replace(_ref3) {\n      var path = _ref3.path,\n          state = _ref3.state;\n\n      var _window$history$state2, _window$history$state3;\n\n      interrupt();\n      var id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : (0, _nonSecure.nanoid)();\n\n      if (!items.length || items.findIndex(function (item) {\n        return item.id === id;\n      }) < 0) {\n        items = [{\n          path: path,\n          state: state,\n          id: id\n        }];\n      } else {\n        items[index] = {\n          path: path,\n          state: state,\n          id: id\n        };\n      }\n\n      window.history.replaceState({\n        id: id\n      }, '', path);\n    },\n    go: function go(n) {\n      interrupt();\n\n      if (n > 0) {\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n      return new Promise(function (resolve, reject) {\n        var done = function done(interrupted) {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          var title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        });\n        var timer = setTimeout(function () {\n          var index = pending.findIndex(function (it) {\n            return it.ref === done;\n          });\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        var onPopState = function onPopState() {\n          var _window$history$state4;\n\n          var id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          var currentIndex = items.findIndex(function (item) {\n            return item.id === id;\n          });\n          index = Math.max(currentIndex, 0);\n          var last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    listen: function listen(listener) {\n      var onPopState = function onPopState() {\n        if (pending.length) {\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return function () {\n        return window.removeEventListener('popstate', onPopState);\n      };\n    }\n  };\n  return history;\n};\n\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n\n  var callback = function _callee() {\n    var last;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!handling) {\n              _context.next = 4;\n              break;\n            }\n\n            queue.unshift(callback);\n            return _context.abrupt(\"return\");\n\n          case 4:\n            handling = true;\n            _context.next = 7;\n            return _regenerator.default.awrap(cb());\n\n          case 7:\n            _context.prev = 7;\n            handling = false;\n\n            if (queue.length) {\n              last = queue.pop();\n              last === null || last === void 0 ? void 0 : last();\n            }\n\n            return _context.finish(7);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0,, 7, 11]], Promise);\n  };\n\n  return callback;\n};\n\nvar linkingHandlers = [];\n\nfunction useLinking(ref, _ref4) {\n  var independent = _ref4.independent,\n      _ref4$enabled = _ref4.enabled,\n      enabled = _ref4$enabled === void 0 ? true : _ref4$enabled,\n      config = _ref4.config,\n      _ref4$getStateFromPat = _ref4.getStateFromPath,\n      getStateFromPath = _ref4$getStateFromPat === void 0 ? _core.getStateFromPath : _ref4$getStateFromPat,\n      _ref4$getPathFromStat = _ref4.getPathFromState,\n      getPathFromState = _ref4$getPathFromStat === void 0 ? _core.getPathFromState : _ref4$getPathFromStat,\n      _ref4$getActionFromSt = _ref4.getActionFromState,\n      getActionFromState = _ref4$getActionFromSt === void 0 ? _core.getActionFromState : _ref4$getActionFromSt;\n  React.useEffect(function () {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n\n    var handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  var _React$useState = React.useState(createMemoryHistory),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 1),\n      history = _React$useState2[0];\n\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var server = React.useContext(_ServerContext.default);\n  var getInitialState = React.useCallback(function () {\n    var value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      var _location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n\n      var path = _location ? _location.pathname + _location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n\n      var navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      var state = getStateFromPathRef.current(path, configRef.current);\n\n      if (state) {\n        var rootState = navigation.getRootState();\n\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(\"An error occurred when trying to handle the link '\" + path + \"': \" + e.message);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      var state = ref.current.getRootState();\n\n      if (state) {\n        var _route$path;\n\n        var route = (0, _core.findFocusedRoute)(state);\n        var path = (_route$path = route === null || route === void 0 ? void 0 : route.path) !== null && _route$path !== void 0 ? _route$path : getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n\n    var onStateChange = function _callee2() {\n      var _route$path2, navigation, previousState, state, pendingPath, route, path, _findMatchingState, _findMatchingState2, previousFocusedState, focusedState, historyDelta, nextIndex, currentIndex;\n\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = ref.current;\n\n              if (!(!navigation || !enabled)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              previousState = previousStateRef.current;\n              state = navigation.getRootState();\n              pendingPath = pendingPopStatePathRef.current;\n              route = (0, _core.findFocusedRoute)(state);\n              path = (_route$path2 = route === null || route === void 0 ? void 0 : route.path) !== null && _route$path2 !== void 0 ? _route$path2 : getPathFromStateRef.current(state, configRef.current);\n              previousStateRef.current = state;\n              pendingPopStatePathRef.current = undefined;\n              _findMatchingState = findMatchingState(previousState, state), _findMatchingState2 = (0, _slicedToArray2.default)(_findMatchingState, 2), previousFocusedState = _findMatchingState2[0], focusedState = _findMatchingState2[1];\n\n              if (!(previousFocusedState && focusedState && path !== pendingPath)) {\n                _context2.next = 38;\n                break;\n              }\n\n              historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n              if (!(historyDelta > 0)) {\n                _context2.next = 17;\n                break;\n              }\n\n              history.push({\n                path: path,\n                state: state\n              });\n              _context2.next = 36;\n              break;\n\n            case 17:\n              if (!(historyDelta < 0)) {\n                _context2.next = 35;\n                break;\n              }\n\n              nextIndex = history.backIndex({\n                path: path\n              });\n              currentIndex = history.index;\n              _context2.prev = 20;\n\n              if (!(nextIndex !== -1 && nextIndex < currentIndex)) {\n                _context2.next = 26;\n                break;\n              }\n\n              _context2.next = 24;\n              return _regenerator.default.awrap(history.go(nextIndex - currentIndex));\n\n            case 24:\n              _context2.next = 28;\n              break;\n\n            case 26:\n              _context2.next = 28;\n              return _regenerator.default.awrap(history.go(historyDelta));\n\n            case 28:\n              history.replace({\n                path: path,\n                state: state\n              });\n              _context2.next = 33;\n              break;\n\n            case 31:\n              _context2.prev = 31;\n              _context2.t0 = _context2[\"catch\"](20);\n\n            case 33:\n              _context2.next = 36;\n              break;\n\n            case 35:\n              history.replace({\n                path: path,\n                state: state\n              });\n\n            case 36:\n              _context2.next = 39;\n              break;\n\n            case 38:\n              history.replace({\n                path: path,\n                state: state\n              });\n\n            case 39:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[20, 31]], Promise);\n    };\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/@react-navigation/native/lib/module/useLinking.js"],"names":["createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","_window$history$state","id","window","state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","_window$history$state2","_window$history$state3","replaceState","go","n","Math","min","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","_window$history$state4","currentIndex","max","last","pop","removeEventListener","addEventListener","listen","listener","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","unshift","linkingHandlers","useLinking","independent","enabled","config","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","getActionFromStateDefault","React","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","indexOf","useState","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","ServerContext","getInitialState","useCallback","value","_server$location","location","pathname","search","thenable","then","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","_previousIndexRef$cur","navigation","previousIndex","record","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","_ref$current","_route$path","route","onStateChange","previousState","pendingPath","_route$path2","previousFocusedState","focusedState","historyDelta","nextIndex","addListener"],"mappings":"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","sourcesContent":["import { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport ServerContext from './ServerContext';\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items = []; // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n\n  const pending = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(it => {\n      const cb = it.cb;\n\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index() {\n      var _window$history$state;\n\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index) {\n      return items[index];\n    },\n\n    backIndex({\n      path\n    }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({\n      path,\n      state\n    }) {\n      interrupt();\n      const id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n\n    replace({\n      path,\n      state\n    }) {\n      var _window$history$state2, _window$history$state3;\n\n      interrupt();\n      const id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n\n      if (!items.length || items.findIndex(item => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{\n          path,\n          state,\n          id\n        }];\n      } else {\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      }\n\n      window.history.replaceState({\n        id\n      }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n; // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          } // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n\n\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        }); // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          var _window$history$state4;\n\n          const id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          const currentIndex = items.findIndex(item => item.id === id); // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n\n          index = Math.max(currentIndex, 0);\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n\n  };\n  return history;\n};\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\n\n\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  } // Tab and drawer will have `history` property, but stack will have history in `routes`\n\n\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state; // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n/**\n * Run async function in series as it's called.\n */\n\n\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n        last === null || last === void 0 ? void 0 : last();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers = [];\nexport default function useLinking(ref, {\n  independent,\n  enabled = true,\n  config,\n  getStateFromPath = getStateFromPathDefault,\n  getPathFromState = getPathFromStateDefault,\n  getActionFromState = getActionFromStateDefault\n}) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  const [history] = React.useState(createMemoryHistory); // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      const location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n\n      catch() {\n        return thenable;\n      }\n\n    };\n    return thenable; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      var _previousIndexRef$cur;\n\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path; // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n\n      const record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current); // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some(r => !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name)))) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(`An error occurred when trying to handle the link '${path}': ${e.message}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        var _route$path;\n\n        const route = findFocusedRoute(state);\n        const path = (_route$path = route === null || route === void 0 ? void 0 : route.path) !== null && _route$path !== void 0 ? _route$path : getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n\n    const onStateChange = async () => {\n      var _route$path2;\n\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = (_route$path2 = route === null || route === void 0 ? void 0 : route.path) !== null && _route$path2 !== void 0 ? _route$path2 : getPathFromStateRef.current(state, configRef.current);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined; // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (previousFocusedState && focusedState && // We should only handle push/pop if path changed from what was in last `popstate`\n      // Otherwise it's likely a change triggered by `popstate`\n      path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            } // Store the updated state as well as fix the path if incorrect\n\n\n            history.replace({\n              path,\n              state\n            });\n          } catch (e) {// The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({\n          path,\n          state\n        });\n      }\n    }; // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}\n//# sourceMappingURL=useLinking.js.map"]},"metadata":{},"sourceType":"script"}