{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useIsKeyboardShown;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useIsKeyboardShown() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      isKeyboardShown = _React$useState2[0],\n      setIsKeyboardShown = _React$useState2[1];\n\n  React.useEffect(function () {\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setIsKeyboardShown(true);\n    };\n\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return setIsKeyboardShown(false);\n    };\n\n    var subscriptions;\n\n    if (_reactNative.Platform.OS === 'ios') {\n      subscriptions = [_reactNative.Keyboard.addListener('keyboardWillShow', handleKeyboardShow), _reactNative.Keyboard.addListener('keyboardWillHide', handleKeyboardHide)];\n    } else {\n      subscriptions = [_reactNative.Keyboard.addListener('keyboardDidShow', handleKeyboardShow), _reactNative.Keyboard.addListener('keyboardDidHide', handleKeyboardHide)];\n    }\n\n    return function () {\n      subscriptions.forEach(function (s) {\n        return s.remove();\n      });\n    };\n  }, []);\n  return isKeyboardShown;\n}","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/@react-navigation/bottom-tabs/lib/module/utils/useIsKeyboardShown.js"],"names":["useIsKeyboardShown","React","useState","isKeyboardShown","setIsKeyboardShown","useEffect","handleKeyboardShow","handleKeyboardHide","subscriptions","Platform","OS","Keyboard","addListener","forEach","s","remove"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;AACe,SAASA,kBAAT,GAA8B;AAC3C,wBAA8CC,KAAK,CAACC,QAAN,CAAe,KAAf,CAA9C;AAAA;AAAA,MAAOC,eAAP;AAAA,MAAwBC,kBAAxB;;AACAH,EAAAA,KAAK,CAACI,SAAN,CAAgB,YAAM;AACpB,QAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,aAAMF,kBAAkB,CAAC,IAAD,CAAxB;AAAA,KAA3B;;AAEA,QAAMG,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,aAAMH,kBAAkB,CAAC,KAAD,CAAxB;AAAA,KAA3B;;AAEA,QAAII,aAAJ;;AAEA,QAAIC,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzBF,MAAAA,aAAa,GAAG,CAACG,sBAASC,WAAT,CAAqB,kBAArB,EAAyCN,kBAAzC,CAAD,EAA+DK,sBAASC,WAAT,CAAqB,kBAArB,EAAyCL,kBAAzC,CAA/D,CAAhB;AACD,KAFD,MAEO;AACLC,MAAAA,aAAa,GAAG,CAACG,sBAASC,WAAT,CAAqB,iBAArB,EAAwCN,kBAAxC,CAAD,EAA8DK,sBAASC,WAAT,CAAqB,iBAArB,EAAwCL,kBAAxC,CAA9D,CAAhB;AACD;;AAED,WAAO,YAAM;AACXC,MAAAA,aAAa,CAACK,OAAd,CAAsB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,MAAF,EAAJ;AAAA,OAAvB;AACD,KAFD;AAGD,GAhBD,EAgBG,EAhBH;AAiBA,SAAOZ,eAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    let subscriptions;\n\n    if (Platform.OS === 'ios') {\n      subscriptions = [Keyboard.addListener('keyboardWillShow', handleKeyboardShow), Keyboard.addListener('keyboardWillHide', handleKeyboardHide)];\n    } else {\n      subscriptions = [Keyboard.addListener('keyboardDidShow', handleKeyboardShow), Keyboard.addListener('keyboardDidHide', handleKeyboardHide)];\n    }\n\n    return () => {\n      subscriptions.forEach(s => s.remove());\n    };\n  }, []);\n  return isKeyboardShown;\n}\n//# sourceMappingURL=useIsKeyboardShown.js.map"]},"metadata":{},"sourceType":"script"}