{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useScrollToTop;\n\nvar _core = require(\"@react-navigation/core\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nfunction useScrollToTop(ref) {\n  var navigation = (0, _core.useNavigation)();\n  var route = (0, _core.useRoute)();\n  React.useEffect(function () {\n    var current = navigation;\n\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    var unsubscribe = current.addListener('tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      var isFirst = navigation === current || navigation.getState().routes[0].key === route.key;\n      requestAnimationFrame(function () {\n        var scrollable = getScrollableNode(ref);\n\n        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n          if ('scrollToTop' in scrollable) {\n            scrollable.scrollToTop();\n          } else if ('scrollTo' in scrollable) {\n            scrollable.scrollTo({\n              x: 0,\n              y: 0,\n              animated: true\n            });\n          } else if ('scrollToOffset' in scrollable) {\n            scrollable.scrollToOffset({\n              offset: 0,\n              animated: true\n            });\n          } else if ('scrollResponderScrollTo' in scrollable) {\n            scrollable.scrollResponderScrollTo({\n              y: 0,\n              animated: true\n            });\n          }\n        }\n      });\n    });\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/@react-navigation/native/lib/module/useScrollToTop.js"],"names":["getScrollableNode","ref","current","getScrollResponder","getNode","useScrollToTop","navigation","route","React","useEffect","getState","type","getParent","unsubscribe","addListener","e","isFocused","isFirst","routes","key","requestAnimationFrame","scrollable","defaultPrevented","scrollToTop","scrollTo","x","y","animated","scrollToOffset","offset","scrollResponderScrollTo"],"mappings":";;;;;AAAA;;AACA;;;;;;AAEA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,MAAIA,GAAG,CAACC,OAAJ,IAAe,IAAnB,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,MAAI,iBAAiBD,GAAG,CAACC,OAArB,IAAgC,cAAcD,GAAG,CAACC,OAAlD,IAA6D,oBAAoBD,GAAG,CAACC,OAArF,IAAgG,6BAA6BD,GAAG,CAACC,OAArI,EAA8I;AAE5I,WAAOD,GAAG,CAACC,OAAX;AACD,GAHD,MAGO,IAAI,wBAAwBD,GAAG,CAACC,OAAhC,EAAyC;AAG9C,WAAOD,GAAG,CAACC,OAAJ,CAAYC,kBAAZ,EAAP;AACD,GAJM,MAIA,IAAI,aAAaF,GAAG,CAACC,OAArB,EAA8B;AAKnC,WAAOD,GAAG,CAACC,OAAJ,CAAYE,OAAZ,EAAP;AACD,GANM,MAMA;AACL,WAAOH,GAAG,CAACC,OAAX;AACD;AACF;;AAEc,SAASG,cAAT,CAAwBJ,GAAxB,EAA6B;AAC1C,MAAMK,UAAU,GAAG,0BAAnB;AACA,MAAMC,KAAK,GAAG,qBAAd;AACAC,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpB,QAAIP,OAAO,GAAGI,UAAd;;AAGA,WAAOJ,OAAO,IAAIA,OAAO,CAACQ,QAAR,GAAmBC,IAAnB,KAA4B,KAA9C,EAAqD;AACnDT,MAAAA,OAAO,GAAGA,OAAO,CAACU,SAAR,EAAV;AACD;;AAED,QAAI,CAACV,OAAL,EAAc;AACZ;AACD;;AAED,QAAMW,WAAW,GAAGX,OAAO,CAACY,WAAR,CAGpB,UAHoB,EAGR,UAAAC,CAAC,EAAI;AAEf,UAAMC,SAAS,GAAGV,UAAU,CAACU,SAAX,EAAlB;AAGA,UAAMC,OAAO,GAAGX,UAAU,KAAKJ,OAAf,IAA0BI,UAAU,CAACI,QAAX,GAAsBQ,MAAtB,CAA6B,CAA7B,EAAgCC,GAAhC,KAAwCZ,KAAK,CAACY,GAAxF;AAGAC,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YAAMC,UAAU,GAAGrB,iBAAiB,CAACC,GAAD,CAApC;;AAEA,YAAIe,SAAS,IAAIC,OAAb,IAAwBI,UAAxB,IAAsC,CAACN,CAAC,CAACO,gBAA7C,EAA+D;AAC7D,cAAI,iBAAiBD,UAArB,EAAiC;AAC/BA,YAAAA,UAAU,CAACE,WAAX;AACD,WAFD,MAEO,IAAI,cAAcF,UAAlB,EAA8B;AACnCA,YAAAA,UAAU,CAACG,QAAX,CAAoB;AAClBC,cAAAA,CAAC,EAAE,CADe;AAElBC,cAAAA,CAAC,EAAE,CAFe;AAGlBC,cAAAA,QAAQ,EAAE;AAHQ,aAApB;AAKD,WANM,MAMA,IAAI,oBAAoBN,UAAxB,EAAoC;AACzCA,YAAAA,UAAU,CAACO,cAAX,CAA0B;AACxBC,cAAAA,MAAM,EAAE,CADgB;AAExBF,cAAAA,QAAQ,EAAE;AAFc,aAA1B;AAID,WALM,MAKA,IAAI,6BAA6BN,UAAjC,EAA6C;AAClDA,YAAAA,UAAU,CAACS,uBAAX,CAAmC;AACjCJ,cAAAA,CAAC,EAAE,CAD8B;AAEjCC,cAAAA,QAAQ,EAAE;AAFuB,aAAnC;AAID;AACF;AACF,OAxBoB,CAArB;AAyBD,KApCmB,CAApB;AAqCA,WAAOd,WAAP;AACD,GAlDD,EAkDG,CAACP,UAAD,EAAaL,GAAb,EAAkBM,KAAK,CAACY,GAAxB,CAlDH;AAmDD","sourcesContent":["import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(ref) {\n  const navigation = useNavigation();\n  const route = useRoute();\n  React.useEffect(() => {\n    let current = navigation; // The screen might be inside another navigator such as stack nested in tabs\n    // We need to find the closest tab navigator and add the listener there\n\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    const unsubscribe = current.addListener( // We don't wanna import tab types here to avoid extra deps\n    // in addition, there are multiple tab implementations\n    // @ts-expect-error\n    'tabPress', e => {\n      // We should scroll to top only when the screen is focused\n      const isFocused = navigation.isFocused(); // In a nested stack navigator, tab press resets the stack to first screen\n      // So we should scroll to top only when we are on first screen\n\n      const isFirst = navigation === current || navigation.getState().routes[0].key === route.key; // Run the operation in the next frame so we're sure all listeners have been run\n      // This is necessary to know if preventDefault() has been called\n\n      requestAnimationFrame(() => {\n        const scrollable = getScrollableNode(ref);\n\n        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n          if ('scrollToTop' in scrollable) {\n            scrollable.scrollToTop();\n          } else if ('scrollTo' in scrollable) {\n            scrollable.scrollTo({\n              x: 0,\n              y: 0,\n              animated: true\n            });\n          } else if ('scrollToOffset' in scrollable) {\n            scrollable.scrollToOffset({\n              offset: 0,\n              animated: true\n            });\n          } else if ('scrollResponderScrollTo' in scrollable) {\n            scrollable.scrollResponderScrollTo({\n              y: 0,\n              animated: true\n            });\n          }\n        }\n      });\n    });\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}\n//# sourceMappingURL=useScrollToTop.js.map"]},"metadata":{},"sourceType":"script"}