{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerItemList;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _DrawerItem = _interopRequireDefault(require(\"./DrawerItem\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n  var buildLink = (0, _native.useLinkBuilder)();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,\n      drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,\n      drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,\n      drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon,\n        drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,\n        drawerItemStyle = _descriptors$route$ke.drawerItemStyle;\n    return React.createElement(_DrawerItem.default, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: function onPress() {\n        navigation.dispatch((0, _extends2.default)({}, focused ? _native.DrawerActions.closeDrawer() : _native.CommonActions.navigate({\n          name: route.name,\n          merge: true\n        }), {\n          target: state.key\n        }));\n      }\n    });\n  });\n}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["descriptors","buildLink","focusedRoute","state","focusedDescriptor","focusedOptions","drawerInactiveBackgroundColor","focused","i","drawerItemStyle","route","drawerLabel","title","navigation","DrawerActions","name","merge","target","key"],"mappings":";;;;;;;;;AAAA;;AAOA;;AAGA;;;;;;AAWe,SAAA,cAAA,OAIL;AAAA,MAJ6B,KAI7B,QAJ6B,KAI7B;AAAA,MAJ6B,UAI7B,QAJ6B,UAI7B;AAAA,MADRA,WACQ,QADRA,WACQ;AACR,MAAMC,SAAS,GAAf,6BAAA;AAEA,MAAMC,YAAY,GAAGC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAvC,KAAqBA,CAArB;AACA,MAAMC,iBAAiB,GAAGJ,WAAW,CAACE,YAAY,CAAlD,GAAqC,CAArC;AACA,MAAMG,cAAc,GAAGD,iBAAiB,CAAxC,OAAA;AAEA,MAAM,qBAAN,GAAA,cAAA,CAAM,qBAAN;AAAA,MAAM,uBAAN,GAAA,cAAA,CAAM,uBAAN;AAAA,MAAM,2BAAN,GAAA,cAAA,CAAM,2BAAN;AAAA,MAIEE,6BAJF,GAAA,cAAA,CAIEA,6BAJF;AAOA,SAAO,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,KAAA,EAAA,CAAA,EAAc;AACpC,QAAMC,OAAO,GAAGC,CAAC,KAAKL,KAAK,CAA3B,KAAA;AACA,gCAMIH,WAAW,CAACU,KAAK,CAAjBV,GAAW,CAAXA,CANJ,OAAA;AAAA,QAAM,KAAN,yBAAM,KAAN;AAAA,QAAM,WAAN,yBAAM,WAAN;AAAA,QAAM,UAAN,yBAAM,UAAN;AAAA,QAAM,gBAAN,yBAAM,gBAAN;AAAA,QAKES,eALF,yBAKEA,eALF;AAQA,WACE,KAAA,CAAA,aAAA,CAAA,mBAAA,EAAA;AACE,MAAA,GAAG,EAAEC,KAAK,CADZ,GAAA;AAEE,MAAA,KAAK,EACHC,WAAW,KAAXA,SAAAA,GAAAA,WAAAA,GAEIC,KAAK,KAALA,SAAAA,GAAAA,KAAAA,GAEAF,KAAK,CAPb,IAAA;AASE,MAAA,IAAI,EATN,UAAA;AAUE,MAAA,OAAO,EAVT,OAAA;AAWE,MAAA,eAAe,EAXjB,qBAAA;AAYE,MAAA,iBAAiB,EAZnB,uBAAA;AAaE,MAAA,qBAAqB,EAbvB,2BAAA;AAcE,MAAA,uBAAuB,EAdzB,6BAAA;AAeE,MAAA,UAAU,EAfZ,gBAAA;AAgBE,MAAA,KAAK,EAhBP,eAAA;AAiBE,MAAA,EAAE,EAAET,SAAS,CAACS,KAAK,CAAN,IAAA,EAAaA,KAAK,CAjBjC,MAiBe,CAjBf;AAkBE,MAAA,OAAO,EAAE,mBAAM;AACbG,QAAAA,UAAU,CAAVA,QAAAA,4BACMN,OAAO,GACPO,sBADO,WACPA,EADO,GAEP,sBAAA,QAAA,CAAuB;AAAEC,UAAAA,IAAI,EAAEL,KAAK,CAAb,IAAA;AAAoBM,UAAAA,KAAK,EAAE;AAA3B,SAAvB,CAHNH;AAIEI,UAAAA,MAAM,EAAEd,KAAK,CAACe;AAJhBL;AAMD;AAzBH,KAAA,CADF;AAVF,GAAO,CAAP;AAwCD","sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate({ name: route.name, merge: true })),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"script"}