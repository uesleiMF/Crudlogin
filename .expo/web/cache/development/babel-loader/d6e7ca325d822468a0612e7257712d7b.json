{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerToggleButton;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _elements = require(\"@react-navigation/elements\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _excluded = [\"tintColor\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction DrawerToggleButton(_ref) {\n  var tintColor = _ref.tintColor,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var navigation = (0, _native.useNavigation)();\n  return React.createElement(_elements.PlatformPressable, _extends({}, rest, {\n    accessible: true,\n    accessibilityRole: \"button\",\n    android_ripple: {\n      borderless: true\n    },\n    onPress: function onPress() {\n      return navigation.dispatch(_native.DrawerActions.toggleDrawer());\n    },\n    style: styles.touchable,\n    hitSlop: _reactNative.Platform.select({\n      ios: undefined,\n      default: {\n        top: 16,\n        right: 16,\n        bottom: 16,\n        left: 16\n      }\n    })\n  }), React.createElement(_reactNative.Image, {\n    style: [styles.icon, tintColor ? {\n      tintColor: tintColor\n    } : null],\n    source: require('./assets/toggle-drawer-icon.png'),\n    fadeDuration: 0\n  }));\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain'\n  },\n  touchable: {\n    marginHorizontal: 11\n  }\n});","map":{"version":3,"sources":["DrawerToggleButton.tsx"],"names":["rest","navigation","borderless","DrawerActions","styles","ios","default","top","right","bottom","left","tintColor","require","icon","height","width","margin","resizeMode","touchable","marginHorizontal"],"mappings":";;;;;;;;;AAAA;;AACA;;AAKA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAWe,SAAA,kBAAA,OAA2D;AAAA,MAA/B,SAA+B,QAA/B,SAA+B;AAAA,MAAfA,IAAe;AACxE,MAAMC,UAAU,GAAhB,4BAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,2BAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,UAAU,EAFZ,IAAA;AAGE,IAAA,iBAAiB,EAHnB,QAAA;AAIE,IAAA,cAAc,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAJlB;AAKE,IAAA,OAAO,EAAE;AAAA,aAAMD,UAAU,CAAVA,QAAAA,CAAoBE,sBALrC,YAKqCA,EAApBF,CAAN;AAAA,KALX;AAME,IAAA,KAAK,EAAEG,MAAM,CANf,SAAA;AAOE,IAAA,OAAO,EAAE,sBAAA,MAAA,CAAgB;AACvBC,MAAAA,GAAG,EADoB,SAAA;AAEvBC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAL,EAAA;AAAWC,QAAAA,KAAK,EAAhB,EAAA;AAAsBC,QAAAA,MAAM,EAA5B,EAAA;AAAkCC,QAAAA,IAAI,EAAE;AAAxC;AAFc,KAAhB;AAPX,GAAA,CAAA,EAYE,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA;AACE,IAAA,KAAK,EAAE,CAACN,MAAM,CAAP,IAAA,EAAcO,SAAS,GAAG;AAAEA,MAAAA,SAAAA,EAAAA;AAAF,KAAH,GADhC,IACS,CADT;AAEE,IAAA,MAAM,EAAEC,OAAO,CAFjB,iCAEiB,CAFjB;AAGE,IAAA,YAAY,EAAE;AAHhB,GAAA,CAZF,CADF;AAoBD;;AAED,IAAMR,MAAM,GAAG,wBAAA,MAAA,CAAkB;AAC/BS,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EADF,EAAA;AAEJC,IAAAA,KAAK,EAFD,EAAA;AAGJC,IAAAA,MAAM,EAHF,CAAA;AAIJC,IAAAA,UAAU,EAAE;AAJR,GADyB;AAO/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,gBAAgB,EAAE;AADT;AAPoB,CAAlB,CAAf","sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  ParamListBase,\n  useNavigation,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Image, Platform, StyleSheet } from 'react-native';\n\nimport type { DrawerNavigationProp } from '../types';\n\ntype Props = {\n  accessibilityLabel?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  tintColor?: string;\n};\n\nexport default function DrawerToggleButton({ tintColor, ...rest }: Props) {\n  const navigation = useNavigation<DrawerNavigationProp<ParamListBase>>();\n\n  return (\n    <PlatformPressable\n      {...rest}\n      accessible\n      accessibilityRole=\"button\"\n      android_ripple={{ borderless: true }}\n      onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}\n      style={styles.touchable}\n      hitSlop={Platform.select({\n        ios: undefined,\n        default: { top: 16, right: 16, bottom: 16, left: 16 },\n      })}\n    >\n      <Image\n        style={[styles.icon, tintColor ? { tintColor } : null]}\n        source={require('./assets/toggle-drawer-icon.png')}\n        fadeDuration={0}\n      />\n    </PlatformPressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n  },\n  touchable: {\n    marginHorizontal: 11,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}