{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/react-native-date-picker/src/DatePickerAndroid.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction addMinutes(date, minutesToAdd) {\n  return new Date(date.valueOf() + minutesToAdd * 60 * 1000);\n}\n\nvar NativeDatePicker = (0, _reactNative.requireNativeComponent)(\"DatePickerManager\", DatePickerAndroid, {\n  nativeOnly: {\n    onChange: true\n  }\n});\nvar height = 180;\nvar timeModeWidth = 240;\nvar defaultWidth = 310;\n\nvar DatePickerAndroid = function (_React$PureComponent) {\n  (0, _inherits2.default)(DatePickerAndroid, _React$PureComponent);\n\n  var _super = _createSuper(DatePickerAndroid);\n\n  function DatePickerAndroid() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DatePickerAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._isCurrentlyClosed = function () {\n      return !_this.previousProps || !_this.previousProps.open;\n    };\n\n    _this.getProps = function () {\n      return (0, _extends2.default)({}, _this.props, {\n        date: _this._date(),\n        minimumDate: _this._minimumDate(),\n        maximumDate: _this._maximumDate(),\n        utc: _this.props.timeZoneOffsetInMinutes !== undefined,\n        style: _this._getStyle()\n      });\n    };\n\n    _this._getStyle = function () {\n      var width = _this.props.mode === 'time' ? timeModeWidth : defaultWidth;\n      return [{\n        width: width,\n        height: height\n      }, _this.props.style];\n    };\n\n    _this._onChange = function (e) {\n      var jsDate = _this._fromIsoWithTimeZoneOffset(e.nativeEvent.date);\n\n      _this.props.onDateChange && _this.props.onDateChange(jsDate);\n\n      if (_this.props.onDateStringChange) {\n        _this.props.onDateStringChange(e.nativeEvent.dateString);\n      }\n    };\n\n    _this._maximumDate = function () {\n      return _this.props.maximumDate && _this._toIsoWithTimeZoneOffset(_this.props.maximumDate);\n    };\n\n    _this._minimumDate = function () {\n      return _this.props.minimumDate && _this._toIsoWithTimeZoneOffset(_this.props.minimumDate);\n    };\n\n    _this._date = function () {\n      return _this._toIsoWithTimeZoneOffset(_this.props.date);\n    };\n\n    _this._fromIsoWithTimeZoneOffset = function (timestamp) {\n      var date = new Date(timestamp);\n      if (_this.props.timeZoneOffsetInMinutes === undefined) return date;\n      return addMinutes(date, -_this.props.timeZoneOffsetInMinutes);\n    };\n\n    _this._toIsoWithTimeZoneOffset = function (date) {\n      if (_this.props.timeZoneOffsetInMinutes === undefined) return date.toISOString();\n      return addMinutes(date, _this.props.timeZoneOffsetInMinutes).toISOString();\n    };\n\n    _this._onConfirm = function (isoDate) {\n      _this.props.onConfirm(_this._fromIsoWithTimeZoneOffset(isoDate));\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(DatePickerAndroid, [{\n    key: \"render\",\n    value: function render() {\n      var props = this.getProps();\n\n      var isClosed = this._isCurrentlyClosed();\n\n      this.previousProps = props;\n\n      if (props.modal) {\n        if (props.open && isClosed) {\n          _reactNative.NativeModules.RNDatePicker.openPicker(props, this._onConfirm, this.props.onCancel);\n        }\n\n        return null;\n      }\n\n      return _react.default.createElement(NativeDatePicker, (0, _extends2.default)({}, props, {\n        onChange: this._onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n  return DatePickerAndroid;\n}(_react.default.PureComponent);\n\nvar _default = DatePickerAndroid;\nexports.default = _default;","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/react-native-date-picker/src/DatePickerAndroid.js"],"names":["addMinutes","date","minutesToAdd","Date","valueOf","NativeDatePicker","DatePickerAndroid","nativeOnly","onChange","height","timeModeWidth","defaultWidth","_isCurrentlyClosed","previousProps","open","getProps","props","_date","minimumDate","_minimumDate","maximumDate","_maximumDate","utc","timeZoneOffsetInMinutes","undefined","style","_getStyle","width","mode","_onChange","e","jsDate","_fromIsoWithTimeZoneOffset","nativeEvent","onDateChange","onDateStringChange","dateString","_toIsoWithTimeZoneOffset","timestamp","toISOString","_onConfirm","isoDate","onConfirm","isClosed","modal","NativeModules","RNDatePicker","openPicker","onCancel","React","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { requireNativeComponent, NativeModules } from 'react-native'\n\nfunction addMinutes(date, minutesToAdd) {\n  return new Date(date.valueOf() + minutesToAdd * 60 * 1000)\n}\n\nconst NativeDatePicker = requireNativeComponent(\n  `DatePickerManager`,\n  DatePickerAndroid,\n  { nativeOnly: { onChange: true } }\n)\n\nconst height = 180\nconst timeModeWidth = 240\nconst defaultWidth = 310\n\nclass DatePickerAndroid extends React.PureComponent {\n  render() {\n    const props = this.getProps()\n    const isClosed = this._isCurrentlyClosed();\n\n    this.previousProps = props; \n    if (props.modal) {\n      if (props.open && isClosed) {\n        NativeModules.RNDatePicker.openPicker(\n          props,\n          this._onConfirm,\n          this.props.onCancel\n        )\n      }\n      return null\n    }\n\n    return <NativeDatePicker {...props} onChange={this._onChange} />\n  }\n\n  _isCurrentlyClosed = () => !this.previousProps || !this.previousProps.open\n\n  getProps = () => ({\n    ...this.props,\n    date: this._date(),\n    minimumDate: this._minimumDate(),\n    maximumDate: this._maximumDate(),\n    utc: this.props.timeZoneOffsetInMinutes !== undefined,\n    style: this._getStyle(),\n  })\n\n  _getStyle = () => {\n    const width = this.props.mode === 'time' ? timeModeWidth : defaultWidth\n    return [{ width, height }, this.props.style]\n  }\n\n  _onChange = (e) => {\n    const jsDate = this._fromIsoWithTimeZoneOffset(e.nativeEvent.date)\n    this.props.onDateChange && this.props.onDateChange(jsDate)\n    if (this.props.onDateStringChange) {\n      this.props.onDateStringChange(e.nativeEvent.dateString)\n    }\n  }\n\n  _maximumDate = () =>\n    this.props.maximumDate &&\n    this._toIsoWithTimeZoneOffset(this.props.maximumDate)\n\n  _minimumDate = () =>\n    this.props.minimumDate &&\n    this._toIsoWithTimeZoneOffset(this.props.minimumDate)\n\n  _date = () => this._toIsoWithTimeZoneOffset(this.props.date)\n\n  _fromIsoWithTimeZoneOffset = (timestamp) => {\n    const date = new Date(timestamp)\n    if (this.props.timeZoneOffsetInMinutes === undefined) return date\n    return addMinutes(date, -this.props.timeZoneOffsetInMinutes)\n  }\n\n  _toIsoWithTimeZoneOffset = (date) => {\n    if (this.props.timeZoneOffsetInMinutes === undefined)\n      return date.toISOString()\n\n    return addMinutes(date, this.props.timeZoneOffsetInMinutes).toISOString()\n  }\n\n  _onConfirm = (isoDate) => {\n    this.props.onConfirm(this._fromIsoWithTimeZoneOffset(isoDate))\n  }\n}\n\nexport default DatePickerAndroid\n"]},"metadata":{},"sourceType":"script"}