{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _DatePickerIOS = _interopRequireDefault(require(\"./DatePickerIOS\"));\n\nvar _DatePickerAndroid = _interopRequireDefault(require(\"./DatePickerAndroid\"));\n\nvar _propTypes = _interopRequireDefault(require(\"./propTypes\"));\n\nvar _colorToHex = require(\"./colorToHex\");\n\nvar _propChecker = require(\"./propChecker\");\n\nvar _this = this,\n    _jsxFileName = \"/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/react-native-date-picker/src/index.js\";\n\nvar DatePicker = _reactNative.Platform.select({\n  android: _DatePickerAndroid.default,\n  ios: _DatePickerIOS.default\n});\n\nDatePicker.propTypes = _propTypes.default;\n\nvar DatePickerWrapper = function DatePickerWrapper(props) {\n  if (__DEV__) (0, _propChecker.throwIfInvalidProps)(props);\n  return _react.default.createElement(DatePicker, (0, _extends2.default)({\n    ref: props.innerRef\n  }, props, {\n    textColor: (0, _colorToHex.colorToHex)(props.textColor),\n    fadeToColor: (0, _colorToHex.colorToHex)(props.fadeToColor),\n    title: getTitle(props),\n    confirmText: props.confirmText ? props.confirmText : 'Confirm',\n    cancelText: props.cancelText ? props.cancelText : 'Cancel',\n    androidVariant: getAndroidVariant(props),\n    minuteInterval: props.minuteInterval ? props.minuteInterval : 1,\n    mode: props.mode ? props.mode : 'datetime',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar getAndroidVariant = function getAndroidVariant(props) {\n  var modal = props.modal,\n      androidVariant = props.androidVariant;\n  if (androidVariant) return androidVariant;\n  return modal ? 'nativeAndroid' : 'iosClone';\n};\n\nvar getTitle = function getTitle(props) {\n  var title = props.title,\n      mode = props.mode;\n  if (title === null) return '';\n  if (title) return title;\n  if (mode === 'time') return 'Select time';\n  return 'Select date';\n};\n\nvar _default = _react.default.memo(DatePickerWrapper);\n\nexports.default = _default;","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/react-native-date-picker/src/index.js"],"names":["DatePicker","Platform","select","android","DatePickerAndroid","ios","DatePickerIOS","propTypes","DatePickerWrapper","props","__DEV__","innerRef","textColor","fadeToColor","getTitle","confirmText","cancelText","getAndroidVariant","minuteInterval","mode","modal","androidVariant","title","React","memo"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;AAEA,IAAMA,UAAU,GAAGC,sBAASC,MAAT,CAAgB;AACjCC,EAAAA,OAAO,EAAEC,0BADwB;AAEjCC,EAAAA,GAAG,EAAEC;AAF4B,CAAhB,CAAnB;;AAKAN,UAAU,CAACO,SAAX,GAAuBA,kBAAvB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACnC,MAAIC,OAAJ,EAAa,sCAAoBD,KAApB;AACb,SACE,6BAAC,UAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACE;AADb,KAEMF,KAFN;AAGE,IAAA,SAAS,EAAE,4BAAWA,KAAK,CAACG,SAAjB,CAHb;AAIE,IAAA,WAAW,EAAE,4BAAWH,KAAK,CAACI,WAAjB,CAJf;AAKE,IAAA,KAAK,EAAEC,QAAQ,CAACL,KAAD,CALjB;AAME,IAAA,WAAW,EAAEA,KAAK,CAACM,WAAN,GAAoBN,KAAK,CAACM,WAA1B,GAAwC,SANvD;AAOE,IAAA,UAAU,EAAEN,KAAK,CAACO,UAAN,GAAmBP,KAAK,CAACO,UAAzB,GAAsC,QAPpD;AAQE,IAAA,cAAc,EAAEC,iBAAiB,CAACR,KAAD,CARnC;AASE,IAAA,cAAc,EAAEA,KAAK,CAACS,cAAN,GAAuBT,KAAK,CAACS,cAA7B,GAA8C,CAThE;AAUE,IAAA,IAAI,EAAET,KAAK,CAACU,IAAN,GAAaV,KAAK,CAACU,IAAnB,GAA0B,UAVlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAcD,CAhBD;;AAkBA,IAAMF,iBAAiB,GAAG,SAApBA,iBAAoB,CAACR,KAAD,EAAW;AACnC,MAAQW,KAAR,GAAkCX,KAAlC,CAAQW,KAAR;AAAA,MAAeC,cAAf,GAAkCZ,KAAlC,CAAeY,cAAf;AACA,MAAIA,cAAJ,EAAoB,OAAOA,cAAP;AACpB,SAAOD,KAAK,GAAG,eAAH,GAAqB,UAAjC;AACD,CAJD;;AAMA,IAAMN,QAAQ,GAAG,SAAXA,QAAW,CAACL,KAAD,EAAW;AAC1B,MAAQa,KAAR,GAAwBb,KAAxB,CAAQa,KAAR;AAAA,MAAeH,IAAf,GAAwBV,KAAxB,CAAeU,IAAf;AACA,MAAIG,KAAK,KAAK,IAAd,EAAoB,OAAO,EAAP;AACpB,MAAIA,KAAJ,EAAW,OAAOA,KAAP;AACX,MAAIH,IAAI,KAAK,MAAb,EAAqB,OAAO,aAAP;AACrB,SAAO,aAAP;AACD,CAND;;eAQeI,eAAMC,IAAN,CAAWhB,iBAAX,C","sourcesContent":["import React from 'react'\nimport { Platform } from 'react-native'\nimport DatePickerIOS from './DatePickerIOS'\nimport DatePickerAndroid from './DatePickerAndroid'\nimport propTypes from './propTypes'\nimport { colorToHex } from './colorToHex'\nimport { throwIfInvalidProps } from './propChecker'\n\nconst DatePicker = Platform.select({\n  android: DatePickerAndroid,\n  ios: DatePickerIOS,\n})\n\nDatePicker.propTypes = propTypes\n\nconst DatePickerWrapper = (props) => {\n  if (__DEV__) throwIfInvalidProps(props)\n  return (\n    <DatePicker\n      ref={props.innerRef}\n      {...props}\n      textColor={colorToHex(props.textColor)}\n      fadeToColor={colorToHex(props.fadeToColor)}\n      title={getTitle(props)}\n      confirmText={props.confirmText ? props.confirmText : 'Confirm'}\n      cancelText={props.cancelText ? props.cancelText : 'Cancel'}\n      androidVariant={getAndroidVariant(props)}\n      minuteInterval={props.minuteInterval ? props.minuteInterval : 1}\n      mode={props.mode ? props.mode : 'datetime'}\n    />\n  )\n}\n\nconst getAndroidVariant = (props) => {\n  const { modal, androidVariant } = props\n  if (androidVariant) return androidVariant\n  return modal ? 'nativeAndroid' : 'iosClone'\n}\n\nconst getTitle = (props) => {\n  const { title, mode } = props\n  if (title === null) return ''\n  if (title) return title\n  if (mode === 'time') return 'Select time'\n  return 'Select date'\n}\n\nexport default React.memo(DatePickerWrapper)\n"]},"metadata":{},"sourceType":"script"}