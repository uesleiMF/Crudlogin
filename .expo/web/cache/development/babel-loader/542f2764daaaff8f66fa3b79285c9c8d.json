{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = NativeSafeAreaView;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\n\nfunction NativeSafeAreaView(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      onInsetsChange = _ref.onInsetsChange;\n  React.useEffect(function () {\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    var element = createContextElement();\n    document.body.appendChild(element);\n\n    var onEnd = function onEnd() {\n      var _window$getComputedSt = window.getComputedStyle(element),\n          paddingTop = _window$getComputedSt.paddingTop,\n          paddingBottom = _window$getComputedSt.paddingBottom,\n          paddingLeft = _window$getComputedSt.paddingLeft,\n          paddingRight = _window$getComputedSt.paddingRight;\n\n      var insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      var frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      };\n      onInsetsChange({\n        nativeEvent: {\n          insets: insets,\n          frame: frame\n        }\n      });\n    };\n\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return function () {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return React.createElement(_reactNative.View, {\n    style: style\n  }, children);\n}\n\nvar _supportedTransitionEvent = null;\n\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n\n  var element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n\n  for (var key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n\n  return _supportedTransitionEvent;\n}\n\nvar _supportedEnv = null;\n\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n\n  var _window = window,\n      CSS = _window.CSS;\n\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n\n  return _supportedEnv;\n}\n\nfunction getInset(side) {\n  return getSupportedEnv() + \"(safe-area-inset-\" + side + \")\";\n}\n\nfunction createContextElement() {\n  var element = document.createElement('div');\n  var style = element.style;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/react-native-safe-area-context/lib/module/NativeSafeAreaProvider.js"],"names":["CSSTransitions","WebkitTransition","Transition","MozTransition","MSTransition","OTransition","NativeSafeAreaView","children","style","onInsetsChange","React","useEffect","document","element","createContextElement","body","appendChild","onEnd","window","getComputedStyle","paddingTop","paddingBottom","paddingLeft","paddingRight","insets","top","parseInt","bottom","left","right","frame","x","y","width","documentElement","offsetWidth","height","offsetHeight","nativeEvent","addEventListener","getSupportedTransitionEvent","removeChild","removeEventListener","createElement","View","_supportedTransitionEvent","key","undefined","_supportedEnv","getSupportedEnv","CSS","supports","getInset","side","position","zIndex","overflow","visibility","transitionDuration","transitionProperty","transitionDelay"],"mappings":"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","sourcesContent":["/* eslint-env browser */\nimport * as React from 'react';\nimport { View } from 'react-native';\n\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\nconst CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\nexport default function NativeSafeAreaView({\n  children,\n  style,\n  onInsetsChange\n}) {\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const element = createContextElement();\n    document.body.appendChild(element);\n\n    const onEnd = () => {\n      const {\n        paddingTop,\n        paddingBottom,\n        paddingLeft,\n        paddingRight\n      } = window.getComputedStyle(element);\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      }; // @ts-ignore: missing properties\n\n      onInsetsChange({\n        nativeEvent: {\n          insets,\n          frame\n        }\n      });\n    };\n\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return /*#__PURE__*/React.createElement(View, {\n    style: style\n  }, children);\n}\nlet _supportedTransitionEvent = null;\n\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n\n  const element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n\n  for (const key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n\n  return _supportedTransitionEvent;\n}\n\nlet _supportedEnv = null;\n\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n\n  const {\n    CSS\n  } = window;\n\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n\n  return _supportedEnv;\n}\n\nfunction getInset(side) {\n  return `${getSupportedEnv()}(safe-area-inset-${side})`;\n}\n\nfunction createContextElement() {\n  const element = document.createElement('div');\n  const {\n    style\n  } = element;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden'; // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}\n//# sourceMappingURL=NativeSafeAreaProvider.js.map"]},"metadata":{},"sourceType":"script"}