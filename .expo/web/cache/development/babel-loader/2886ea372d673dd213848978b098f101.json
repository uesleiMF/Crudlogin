{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinkProps;\n\nvar _core = require(\"@react-navigation/core\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _LinkingContext = _interopRequireDefault(require(\"./LinkingContext\"));\n\nvar _useLinkTo = _interopRequireDefault(require(\"./useLinkTo\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar getStateFromParams = function getStateFromParams(params) {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n\nfunction useLinkProps(_ref) {\n  var to = _ref.to,\n      action = _ref.action;\n\n  var _options$getPathFromS;\n\n  var root = React.useContext(_core.NavigationContainerRefContext);\n  var navigation = React.useContext(_core.NavigationHelpersContext);\n\n  var _React$useContext = React.useContext(_LinkingContext.default),\n      options = _React$useContext.options;\n\n  var linkTo = (0, _useLinkTo.default)();\n\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n\n    var shouldHandle = false;\n\n    if (_reactNative.Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n        e.preventDefault();\n        shouldHandle = true;\n      }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  var getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : _core.getPathFromState;\n  var href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      params: to.params,\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href: href,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/@react-navigation/native/lib/module/useLinkProps.js"],"names":["getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","_options$getPathFromS","root","React","useContext","NavigationContainerRefContext","navigation","NavigationHelpersContext","LinkingContext","options","linkTo","onPress","e","_e$currentTarget","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","getPathFromState","href","config","accessibilityRole"],"mappings":"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","sourcesContent":["import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport LinkingContext from './LinkingContext';\nimport useLinkTo from './useLinkTo';\n\nconst getStateFromParams = params => {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\n\n\nexport default function useLinkProps({\n  to,\n  action\n}) {\n  var _options$getPathFromS;\n\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo();\n\n  const onPress = e => {\n    var _e$currentTarget;\n\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && // onPress prevented default\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && ( // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    e.button == null || e.button === 0) && // ignore everything but left clicks\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target) // let browser handle \"target=_blank\" etc.\n    ) {\n        e.preventDefault();\n        shouldHandle = true;\n      }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = (_options$getPathFromS = options === null || options === void 0 ? void 0 : options.getPathFromState) !== null && _options$getPathFromS !== void 0 ? _options$getPathFromS : getPathFromState;\n  const href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      // @ts-expect-error\n      params: to.params,\n      // @ts-expect-error\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href,\n    accessibilityRole: 'link',\n    onPress\n  };\n}\n//# sourceMappingURL=useLinkProps.js.map"]},"metadata":{},"sourceType":"script"}