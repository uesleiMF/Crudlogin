{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinkTo;\n\nvar _core = require(\"@react-navigation/core\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _LinkingContext = _interopRequireDefault(require(\"./LinkingContext\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useLinkTo() {\n  var navigation = React.useContext(_core.NavigationContainerRefContext);\n  var linking = React.useContext(_LinkingContext.default);\n  var linkTo = React.useCallback(function (to) {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n\n    if (typeof to !== 'string') {\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n\n    if (!to.startsWith('/')) {\n      throw new Error(\"The path must start with '/' (\" + to + \").\");\n    }\n\n    var options = linking.options;\n    var state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : (0, _core.getStateFromPath)(to, options === null || options === void 0 ? void 0 : options.config);\n\n    if (state) {\n      var action = (0, _core.getActionFromState)(state, options === null || options === void 0 ? void 0 : options.config);\n\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}","map":{"version":3,"sources":["/home/ueslei/Documentos/GitHub/Crudlogin/node_modules/@react-navigation/native/lib/module/useLinkTo.js"],"names":["useLinkTo","navigation","React","useContext","NavigationContainerRefContext","linking","LinkingContext","linkTo","useCallback","to","undefined","Error","navigate","screen","params","startsWith","options","state","getStateFromPath","config","action","dispatch","reset"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AACe,SAASA,SAAT,GAAqB;AAClC,MAAMC,UAAU,GAAGC,KAAK,CAACC,UAAN,CAAiBC,mCAAjB,CAAnB;AACA,MAAMC,OAAO,GAAGH,KAAK,CAACC,UAAN,CAAiBG,uBAAjB,CAAhB;AACA,MAAMC,MAAM,GAAGL,KAAK,CAACM,WAAN,CAAkB,UAAAC,EAAE,EAAI;AACrC,QAAIR,UAAU,KAAKS,SAAnB,EAA8B;AAC5B,YAAM,IAAIC,KAAJ,CAAU,kFAAV,CAAN;AACD;;AAED,QAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;AAE1BR,MAAAA,UAAU,CAACW,QAAX,CAAoBH,EAAE,CAACI,MAAvB,EAA+BJ,EAAE,CAACK,MAAlC;AACA;AACD;;AAED,QAAI,CAACL,EAAE,CAACM,UAAH,CAAc,GAAd,CAAL,EAAyB;AACvB,YAAM,IAAIJ,KAAJ,oCAA2CF,EAA3C,QAAN;AACD;;AAED,QACEO,OADF,GAEIX,OAFJ,CACEW,OADF;AAGA,QAAMC,KAAK,GAAGD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,IAA0CA,OAAO,CAACE,gBAAlD,GAAqEF,OAAO,CAACE,gBAAR,CAAyBT,EAAzB,EAA6BO,OAAO,CAACG,MAArC,CAArE,GAAoH,4BAAiBV,EAAjB,EAAqBO,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,MAA/E,CAAlI;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAMG,MAAM,GAAG,8BAAmBH,KAAnB,EAA0BD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACG,MAApF,CAAf;;AAEA,UAAIC,MAAM,KAAKV,SAAf,EAA0B;AACxBT,QAAAA,UAAU,CAACoB,QAAX,CAAoBD,MAApB;AACD,OAFD,MAEO;AACLnB,QAAAA,UAAU,CAACqB,KAAX,CAAiBL,KAAjB;AACD;AACF,KARD,MAQO;AACL,YAAM,IAAIN,KAAJ,CAAU,iDAAV,CAAN;AACD;AACF,GA/Bc,EA+BZ,CAACN,OAAD,EAAUJ,UAAV,CA/BY,CAAf;AAgCA,SAAOM,MAAP;AACD","sourcesContent":["import { getActionFromState, getStateFromPath, NavigationContainerRefContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from './LinkingContext';\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n  const linkTo = React.useCallback(to => {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n\n    if (typeof to !== 'string') {\n      // @ts-expect-error: This is fine\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n\n    if (!to.startsWith('/')) {\n      throw new Error(`The path must start with '/' (${to}).`);\n    }\n\n    const {\n      options\n    } = linking;\n    const state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : getStateFromPath(to, options === null || options === void 0 ? void 0 : options.config);\n\n    if (state) {\n      const action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}\n//# sourceMappingURL=useLinkTo.js.map"]},"metadata":{},"sourceType":"script"}